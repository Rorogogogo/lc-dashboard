{"mappings":"ACyCA,SAAS,iBAAiB,QAAS,SAAU,CAAC,EAC5C,GAAI,CAEF,SAAS,EAAqB,CAAO,CAAE,CAAG,EACxC,OAAO,EAAQ,WAAa,EAAM,EAAU,EAAqB,EAAQ,WAAY,EACvF,CAEA,IAAI,EAAsB,UACtB,EAAqB,UAErB,EAAY,cAEZ,EAAW,EAAE,UAAY,EAAE,OAC3B,EAAU,EAAqB,EAAE,OAAQ,MACzC,EAAK,EAAqB,EAAS,MACnC,EAAQ,EAAqB,EAAI,SAErC,SAAS,EAAW,CAAO,CAAE,CAAG,EAC9B,EAAQ,UAAY,EAAQ,UAAU,QAAQ,EAAW,IAAM,CACjE,CAEA,SAAS,EAAS,CAAO,EAGvB,OACG,GAAY,EAAQ,aAAa,kBAAqB,EAAQ,aAAa,cAAgB,EAAQ,SAGxG,CACA,GAAI,AAlBc,eAkBF,KAAK,EAAM,WAAY,CAKrC,IAAK,IAJD,EACA,EAAQ,EAAG,MAGN,EAAI,EAAG,EAAI,EAAM,OAAQ,IAC5B,CAAK,CAAC,EAAE,GAAK,EACf,EAAe,EAAQ,aAAa,kBAAoB,EAExD,EAAW,CAAK,CAAC,EAAE,CAAE,IAPzB,IAWI,EAAM,EAIR,CAAA,AAAmD,KAAnD,EAAQ,UAAU,QAAQ,IACzB,AAAwD,KAAxD,EAAM,UAAU,QAtCY,QAuC3B,AAAiD,IAAjD,EAAQ,UAAU,QAAQ,EAAuB,GAEnD,CAAA,EAAM,CALR,EASA,EAAW,EAAS,GAGpB,IAAI,EAAY,EAAM,OAAO,CAAC,EAAE,CAG5B,EAAO,EAAE,CAAC,MAAM,KAAK,EAAU,KAAM,GAErC,EAAU,IAAQ,EAGtB,EAAK,KAAK,SAAU,CAAC,CAAE,CAAC,EACtB,IAAI,EAAI,EAAS,AAAC,CAAA,EAAU,EAAI,CAAA,EAAG,KAAK,CAAC,EAAa,EAClD,EAAI,EAAS,AAAC,CAAA,EAAU,EAAI,CAAA,EAAG,KAAK,CAAC,EAAa,EACtD,OAAO,MAAM,EAAI,GAAK,EAAE,cAAc,GAAK,EAAI,CACjD,GAMA,IAHA,IAAI,EAAc,EAAU,YAGrB,EAAK,QACV,EAAY,YAAY,EAAK,OAAO,EAAG,EAAE,CAAC,EAAE,EAI9C,EAAM,aAAa,EAAa,EAClC,CACF,CAAE,MAAO,EAAO,CAEhB,CACF","sources":["<anon>","dev/s4i-html5/mqtt-savant/s4i-xapi-demo/js/web/js/sortable.js"],"sourcesContent":["var $f312ac3f555224b9$exports = {};\n/**\r\n * sortable 1.5 (or something, I always forget to update this)\r\n *\r\n * Makes html tables sortable, ie9+\r\n *\r\n * Styling is done in css.\r\n *\r\n * Copyleft 2017 Jonas Earendel\r\n *\r\n * This is free and unencumbered software released into the public domain.\r\n *\r\n * Anyone is free to copy, modify, publish, use, compile, sell, or\r\n * distribute this software, either in source code form or as a compiled\r\n * binary, for any purpose, commercial or non-commercial, and by any\r\n * means.\r\n *\r\n * In jurisdictions that recognize copyright laws, the author or authors\r\n * of this software dedicate any and all copyright interest in the\r\n * software to the public domain. We make this dedication for the benefit\r\n * of the public at large and to the detriment of our heirs and\r\n * successors. We intend this dedication to be an overt act of\r\n * relinquishment in perpetuity of all present and future rights to this\r\n * software under copyright law.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\r\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\r\n * IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR\r\n * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\r\n * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\r\n * OTHER DEALINGS IN THE SOFTWARE.\r\n *\r\n * For more information, please refer to <http://unlicense.org>\r\n *\r\n */ // sort is super fast, even with huge tables, so that is probably not the issue\n// Not solved with documentFragment, same issue... :(\n// My guess is that it is simply too much to hold in memory, since\n// it freezes even before sortable is called if the table is too big in index.html\ndocument.addEventListener(\"click\", function(e) {\n    try {\n        // allows for elements inside TH\n        function findElementRecursive(element, tag) {\n            return element.nodeName === tag ? element : findElementRecursive(element.parentNode, tag);\n        }\n        var descending_th_class = \" dir-d \";\n        var ascending_th_class = \" dir-u \";\n        var ascending_table_sort_class = \"asc\";\n        var regex_dir = / dir-(u|d) /;\n        var regex_table = /\\bsortable\\b/;\n        var alt_sort = e.shiftKey || e.altKey;\n        var element = findElementRecursive(e.target, \"TH\");\n        var tr = findElementRecursive(element, \"TR\");\n        var table = findElementRecursive(tr, \"TABLE\");\n        function reClassify(element, dir) {\n            element.className = element.className.replace(regex_dir, \"\") + dir;\n        }\n        function getValue(element) {\n            // If you aren't using data-sort and want to make it just the tiniest bit smaller/faster\n            // comment this line and uncomment the next one\n            return alt_sort && element.getAttribute(\"data-sort-alt\") || element.getAttribute(\"data-sort\") || element.innerText;\n        // return element.innerText\n        }\n        if (regex_table.test(table.className)) {\n            var column_index;\n            var nodes = tr.cells;\n            // reset thead cells and get column index\n            for(var i = 0; i < nodes.length; i++)if (nodes[i] === element) column_index = element.getAttribute(\"data-sort-col\") || i;\n            else reClassify(nodes[i], \"\");\n            var dir = descending_th_class;\n            // check if we're sorting up or down\n            if (element.className.indexOf(descending_th_class) !== -1 || table.className.indexOf(ascending_table_sort_class) !== -1 && element.className.indexOf(ascending_th_class) == -1) dir = ascending_th_class;\n            // update the `th` class accordingly\n            reClassify(element, dir);\n            // extract all table rows, so the sorting can start.\n            var org_tbody = table.tBodies[0];\n            // get the array rows in an array, so we can sort them...\n            var rows = [].slice.call(org_tbody.rows, 0);\n            var reverse = dir === ascending_th_class;\n            // sort them using custom built in array sort.\n            rows.sort(function(a, b) {\n                var x = getValue((reverse ? a : b).cells[column_index]);\n                var y = getValue((reverse ? b : a).cells[column_index]);\n                return isNaN(x - y) ? x.localeCompare(y) : x - y;\n            });\n            // Make a clone without content\n            var clone_tbody = org_tbody.cloneNode();\n            // Build a sorted table body and replace the old one.\n            while(rows.length)clone_tbody.appendChild(rows.splice(0, 1)[0]);\n            // And finally insert the end result\n            table.replaceChild(clone_tbody, org_tbody);\n        }\n    } catch (error) {\n    // console.log(error)\n    }\n});\n\n\n//# sourceMappingURL=index.e48ca094.js.map\n","/**\r\n * sortable 1.5 (or something, I always forget to update this)\r\n *\r\n * Makes html tables sortable, ie9+\r\n *\r\n * Styling is done in css.\r\n *\r\n * Copyleft 2017 Jonas Earendel\r\n *\r\n * This is free and unencumbered software released into the public domain.\r\n *\r\n * Anyone is free to copy, modify, publish, use, compile, sell, or\r\n * distribute this software, either in source code form or as a compiled\r\n * binary, for any purpose, commercial or non-commercial, and by any\r\n * means.\r\n *\r\n * In jurisdictions that recognize copyright laws, the author or authors\r\n * of this software dedicate any and all copyright interest in the\r\n * software to the public domain. We make this dedication for the benefit\r\n * of the public at large and to the detriment of our heirs and\r\n * successors. We intend this dedication to be an overt act of\r\n * relinquishment in perpetuity of all present and future rights to this\r\n * software under copyright law.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\r\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\r\n * IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR\r\n * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\r\n * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\r\n * OTHER DEALINGS IN THE SOFTWARE.\r\n *\r\n * For more information, please refer to <http://unlicense.org>\r\n *\r\n */\r\n\r\n// sort is super fast, even with huge tables, so that is probably not the issue\r\n// Not solved with documentFragment, same issue... :(\r\n// My guess is that it is simply too much to hold in memory, since\r\n// it freezes even before sortable is called if the table is too big in index.html\r\n\r\ndocument.addEventListener('click', function (e) {\r\n  try {\r\n    // allows for elements inside TH\r\n    function findElementRecursive(element, tag) {\r\n      return element.nodeName === tag ? element : findElementRecursive(element.parentNode, tag)\r\n    }\r\n\r\n    var descending_th_class = ' dir-d '\r\n    var ascending_th_class = ' dir-u '\r\n    var ascending_table_sort_class = 'asc'\r\n    var regex_dir = / dir-(u|d) /\r\n    var regex_table = /\\bsortable\\b/\r\n    var alt_sort = e.shiftKey || e.altKey\r\n    var element = findElementRecursive(e.target, 'TH')\r\n    var tr = findElementRecursive(element, 'TR')\r\n    var table = findElementRecursive(tr, 'TABLE')\r\n\r\n    function reClassify(element, dir) {\r\n      element.className = element.className.replace(regex_dir, '') + dir\r\n    }\r\n\r\n    function getValue(element) {\r\n      // If you aren't using data-sort and want to make it just the tiniest bit smaller/faster\r\n      // comment this line and uncomment the next one\r\n      return (\r\n        (alt_sort && element.getAttribute('data-sort-alt')) || element.getAttribute('data-sort') || element.innerText\r\n      )\r\n      // return element.innerText\r\n    }\r\n    if (regex_table.test(table.className)) {\r\n      var column_index\r\n      var nodes = tr.cells\r\n\r\n      // reset thead cells and get column index\r\n      for (var i = 0; i < nodes.length; i++) {\r\n        if (nodes[i] === element) {\r\n          column_index = element.getAttribute('data-sort-col') || i\r\n        } else {\r\n          reClassify(nodes[i], '')\r\n        }\r\n      }\r\n\r\n      var dir = descending_th_class\r\n\r\n      // check if we're sorting up or down\r\n      if (\r\n        element.className.indexOf(descending_th_class) !== -1 ||\r\n        (table.className.indexOf(ascending_table_sort_class) !== -1 &&\r\n          element.className.indexOf(ascending_th_class) == -1)\r\n      ) {\r\n        dir = ascending_th_class\r\n      }\r\n\r\n      // update the `th` class accordingly\r\n      reClassify(element, dir)\r\n\r\n      // extract all table rows, so the sorting can start.\r\n      var org_tbody = table.tBodies[0]\r\n\r\n      // get the array rows in an array, so we can sort them...\r\n      var rows = [].slice.call(org_tbody.rows, 0)\r\n\r\n      var reverse = dir === ascending_th_class\r\n\r\n      // sort them using custom built in array sort.\r\n      rows.sort(function (a, b) {\r\n        var x = getValue((reverse ? a : b).cells[column_index])\r\n        var y = getValue((reverse ? b : a).cells[column_index])\r\n        return isNaN(x - y) ? x.localeCompare(y) : x - y\r\n      })\r\n\r\n      // Make a clone without content\r\n      var clone_tbody = org_tbody.cloneNode()\r\n\r\n      // Build a sorted table body and replace the old one.\r\n      while (rows.length) {\r\n        clone_tbody.appendChild(rows.splice(0, 1)[0])\r\n      }\r\n\r\n      // And finally insert the end result\r\n      table.replaceChild(clone_tbody, org_tbody)\r\n    }\r\n  } catch (error) {\r\n    // console.log(error)\r\n  }\r\n})\r\n"],"names":["document","addEventListener","e","findElementRecursive","element","tag","nodeName","parentNode","descending_th_class","ascending_th_class","regex_dir","alt_sort","shiftKey","altKey","target","tr","table","reClassify","dir","className","replace","getValue","getAttribute","innerText","regex_table","test","column_index","nodes","cells","i","length","indexOf","org_tbody","tBodies","rows","slice","call","reverse","sort","a","b","x","y","isNaN","localeCompare","clone_tbody","cloneNode","appendChild","splice","replaceChild","error"],"version":3,"file":"index.e48ca094.js.map"}